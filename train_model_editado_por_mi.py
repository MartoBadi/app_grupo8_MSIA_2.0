# -*- coding: utf-8 -*-
"""train_model_editado_por_mi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/197yQsc9bgl4y4CTI5v4hAiPcz2f32vYV
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
import os

# Contamos las imágenes de cada directorio dentro del directorio seg_test para pasar la mitad a una carpeta del set de validación

import os

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/bosque'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta bosque: {num_archivos}')

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/calle'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta calle: {num_archivos}')

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/construcciones'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta construcciones: {num_archivos}')

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/glaciar'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta glaciar: {num_archivos}')

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/mar'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta mar: {num_archivos}')

# Especifica la ruta de la carpeta
carpeta = '/content/seg_test/montaña'

# Cuenta el número de archivos en la carpeta
num_archivos = len(os.listdir(carpeta))

print(f'Número de archivos en la carpeta montaña: {num_archivos}')

# Como en el repositorio de Github había solo un directorio para el set de entrenamiento y otro para el set de prueba, movemos la mitad de los datos o la mitad más uno a la carpeta del set de validación.

import os
import shutil

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/bosque'
directorio_destino = '/content/set_val/bosque'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:237]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/calle'
directorio_destino = '/content/set_val/calle'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:237]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/construcciones'
directorio_destino = '/content/set_val/construcciones'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:219]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/glaciar'
directorio_destino = '/content/set_val/glaciar'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:277]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/mar'
directorio_destino = '/content/set_val/mar'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:255]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

# Especifica las rutas de los directorios
directorio_origen = '/content/seg_test/montaña'
directorio_destino = '/content/set_val/montaña'

# Obtén la lista de archivos en el directorio de origen
archivos = os.listdir(directorio_origen)

# Asegúrate de que el directorio de destino exista
os.makedirs(directorio_destino, exist_ok=True)

# Mueve los archivos
for archivo in archivos[:263]:
    ruta_origen = os.path.join(directorio_origen, archivo)
    ruta_destino = os.path.join(directorio_destino, archivo)
    if os.path.isfile(ruta_origen):
        shutil.move(ruta_origen, ruta_destino)

def train_model():
    # Define paths
    train_dir = 'seg_train'
    val_dir = 'set_val'
    test_dir = 'seg_test'
    model_save_path = 'model.keras'

    # Image data generators
    train_datagen = ImageDataGenerator(rescale=1.0/255.0)
    val_datagen = ImageDataGenerator(rescale=1.0/255.0)
    test_datagen = ImageDataGenerator(rescale=1.0/255.0)

    train_generator = train_datagen.flow_from_directory(
        train_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical'
    )

    val_generator = val_datagen.flow_from_directory (
        val_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical'
    )

    test_generator = test_datagen.flow_from_directory(
        test_dir,
        target_size=(150, 150),
        batch_size=32,
        class_mode='categorical'
    )

    # Build CNN model
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
        MaxPooling2D((2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(512, activation='relu'),
        Dropout(0.5),
        Dense(6, activation='softmax')  # 6 classes
    ])

    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    # Callbacks
    early_stopping = EarlyStopping(monitor='val_loss', patience=10)
    model_checkpoint = ModelCheckpoint(model_save_path, save_best_only=True, monitor='val_loss')

    # Train the model
    model.fit(
        train_generator,
        epochs=8,
        validation_data=val_generator,
        callbacks=[early_stopping, model_checkpoint]
    )

    # Save the model
    model.save("/content/model.h5")

if __name__ == "__main__":
    train_model()